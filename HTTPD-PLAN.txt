## How the HTTPD is designed ##

The pagekite.py HTTPD does:

1. XML-RPC for anything to do with controlling pagekite.py, so the
   interface can be shared between an AJAX Web-UI and a normal GUI,
   or even accessed remotely. Look into serving CORS headers to allow
   direct integration with pagekite.net/home/.

2. Static file server.

3. Embedded static files (for the default UI).

4. /vars.txt for monitoring.  Make optional?

5. Access controls for backends.


### Sharing files ###

Aside from the embedded static stuff, the served static content should
be dynamically created at runtime (but persisted to disk?).

Should support arbitrary http://vhost/path -> /local/fs/path mappings.


### Access controls ###

Shared files and directories *could* have access controls based on:

  * One-off passwords
  * Username/password pairs
  * OpenID, Facebook connect, Twitter
  * Autogenerated obscure URLs
  * Guest IP address
  * SSL certificates
  * Time (files could expire)
  * Access counts (files could expire)
  * Banning/allowing bot traffic


### Access controls for backends ###

We should be able to limit access to backend resources using some/all of
the above methods.  Granting access should/could become an interactive
process.


### Presenting human readable log info ###

The HTTP UI should give human readable information about visits to a site.
This means adding visual cues such as grouping, pictures and colors so it
is easy to see that the same person is browsing your site.


